import unittest

class TestFuncionesRecursivas(unittest.TestCase):

    def test_suma_n(self):
        self.assertEqual(suma_n(5), 15)
        self.assertEqual(suma_n(10), 55)
        self.assertEqual(suma_n(0), 0)

    def test_factorial(self):
        self.assertEqual(factorial(5), 120)
        self.assertEqual(factorial(3), 6)
        self.assertEqual(factorial(0), 1)

    def test_potencia(self):
        self.assertEqual(potencia(2, 3), 8)
        self.assertEqual(potencia(5, 2), 25)
        self.assertEqual(potencia(3, 0), 1)

    def test_suma_lista(self):
        self.assertEqual(suma_lista([1, 2, 3, 4, 5]), 15)
        self.assertEqual(suma_lista([5, 10, 15]), 30)
        self.assertEqual(suma_lista([]), 0)

    def test_media_lista(self):
        self.assertEqual(media_lista([1, 2, 3, 4, 5]), 3)
        self.assertEqual(media_lista([10, 20, 30]), 20)
        self.assertEqual(media_lista([]), 0)

    def test_desviacion_tipica(self):
        self.assertAlmostEqual(desviacion_tipica([1, 2, 3, 4, 5]), 1.4142135, places=5)
        self.assertAlmostEqual(desviacion_tipica([10, 20, 30]), 8.1649658, places=5)
        self.assertAlmostEqual(desviacion_tipica([]), 0)

    def test_suma_pares(self):
        self.assertEqual(suma_pares(9), 20)
        self.assertEqual(suma_pares(10), 30)
        self.assertEqual(suma_pares(0), 0)

    def test_suma_pares_lista(self):
        self.assertEqual(suma_pares_lista([1, 2, 3, 4]), 6)
        self.assertEqual(suma_pares_lista([2, 4, 6, 8]), 20)
        self.assertEqual(suma_pares_lista([1, 3, 5, 7]), 0)

    def test_obtener_lista_pares(self):
        self.assertEqual(obtener_lista_pares([1, 2, 3, 4]), [2, 4])
        self.assertEqual(obtener_lista_pares([2, 3, 5, 7]), [2])
        self.assertEqual(obtener_lista_pares([1, 3, 5, 7]), [])

    def test_lista_pares(self):
        self.assertEqual(lista_pares(9), [8, 6, 4, 2])
        self.assertEqual(lista_pares(6), [6, 4, 2])

    def test_producto_escalar(self):
        self.assertEqual(producto_escalar([1, 2, 3], [2, 4, 6]), 28)
        self.assertEqual(producto_escalar([2, 4, 6], [1, 2, 3]), 28)
        self.assertEqual(producto_escalar([], []), None)

    def test_fibonacci(self):
        self.assertEqual(fibonacci(6), 8)
        self.assertEqual(fibonacci(10), 55)
        self.assertEqual(fibonacci(0), 0)

    def test_cociente_fibonacci(self):
        self.assertAlmostEqual(cociente_fibonacci(12), 1.618033988749895, places=5)

    def test_relacion_fibonacci_r_aurea(self):
        self.assertAlmostEqual(relacion_fibonacci_r_aurea(10), 1.618033988749895, places=5)


